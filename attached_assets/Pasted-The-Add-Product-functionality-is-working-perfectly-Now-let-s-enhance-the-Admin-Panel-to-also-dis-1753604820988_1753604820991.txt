The "Add Product" functionality is working perfectly. Now, let's enhance the Admin Panel to also display and delete products.
Task 1: Create an endpoint to get all products.
In the file '@server/index.ts', please add a new GET endpoint to fetch all products from the database. This code should go right after the POST endpoint for adding products:
ts
// Endpoint to get all products
app.get('/api/products', async (req, res) => {
  try {
    const products = await storage.getProducts();
    res.json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});
Task 2: Create an endpoint to delete a product.
In the same file, '@server/index.ts', please add a new DELETE endpoint to remove a product by its ID:
ts
// Endpoint to delete a product
app.delete('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await storage.deleteProduct(parseInt(id));
    res.status(204).send(); // 204 No Content success status
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ error: 'Failed to delete product' });
  }
});
Task 3: Implement the delete function in the storage layer.
In the file '@server/storage.ts', please add the 'deleteProduct' method to the 'PostgresStorage' class:
ts
// Method to delete a product by ID
async deleteProduct(id: number): Promise<void> {
  const query = 'DELETE FROM products WHERE id = $1';
  await this.pool.query(query, [id]);
}
Task 4: Update the Admin Panel UI.
Finally, in the file '@src/pages/Admin.tsx', replace the entire 'AdminDashboard' component with this new, complete version. This version will fetch and display the list of products and include a delete button for each one.
tsx
// This is the new, complete AdminDashboard component
const AdminDashboard = () => {
  // State for the form
  const [name, setName] = useState('');
  const [category, setCategory] = useState('المكملات الغذائية');
  const [price, setPrice] = useState('');
  const [description, setDescription] = useState('');
  const [benefits, setBenefits] = useState('');
  const [usage, setUsage] = useState('');
  const [ingredients, setIngredients] = useState('');
  const [imageUrl, setImageUrl] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // State for the product list
  const [products, setProducts] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const fetchProducts = async () => {
    try {
      const response = await fetch('/api/products');
      const data = await response.json();
      setProducts(data);
    } catch (error) {
      console.error("Failed to fetch products:", error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const handleDelete = async (productId: number) => {
    if (window.confirm('هل أنت متأكد من أنك تريد حذف هذا المنتج؟')) {
      try {
        await fetch(`/api/products/${productId}`, { method: 'DELETE' });
        alert('تم حذف المنتج بنجاح.');
        fetchProducts(); // Refresh the list
      } catch (error) {
        console.error('Failed to delete product:', error);
        alert('فشلت عملية الحذف.');
      }
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      const response = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, category, price, description, benefits, usage, ingredients, imageUrl }),
      });
      if (!response.ok) throw new Error('Network response was not ok');
      const newProduct = await response.json();
      alert(`تمت إضافة المنتج بنجاح! المنتج: ${newProduct.name}`);
      setName(''); setCategory('المكملات الغذائية'); setPrice(''); setDescription(''); setBenefits(''); setUsage(''); setIngredients(''); setImageUrl('');
      fetchProducts(); // Refresh the list
    } catch (error) {
      console.error('Failed to add product:', error);
      alert('فشلت عملية إضافة المنتج.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-green-800 mb-6">لوحة التحكم</h1>
      
      {/* Add Product Form */}
      <div className="bg-white p-8 rounded-lg shadow-md mb-8">
        <h2 className="text-2xl font-semibold mb-6">إضافة منتج جديد</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Form fields are the same as before... */}
          <div><label>اسم المنتج</label><input type="text" value={name} onChange={(e) => setName(e.target.value)} className="mt-1 block w-full border border-gray-300 rounded-md p-2" required /></div>
          <div><label>التصنيف</label><select value={category} onChange={(e) => setCategory(e.target.value)} className="mt-1 block w-full border border-gray-300 rounded-md p-2"><option>المكملات الغذائية</option><option>المشروبات الصحية</option><option>العناية الشخصية</option></select></div>
          <div><label>السعر</label><input type="number" value={price} onChange={(e) => setPrice(e.target.value)} className="mt-1 block w-full border border-gray-300 rounded-md p-2" required /></div>
          <div><label>الوصف</label><textarea value={description} onChange={(e) => setDescription(e.target.value)} rows={2} className="mt-1 block w-full border border-gray-300 rounded-md p-2"></textarea></div>
          <div><label>الفوائد</label><textarea value={benefits} onChange={(e) => setBenefits(e.target.value)} rows={2} className="mt-1 block w-full border border-gray-300 rounded-md p-2"></textarea></div>
          <div><label>طريقة الاستخدام</label><textarea value={usage} onChange={(e) => setUsage(e.target.value)} rows={2} className="mt-1 block w-full border border-gray-300 rounded-md p-2"></textarea></div>
          <div><label>المكونات</label><textarea value={ingredients} onChange={(e) => setIngredients(e.target.value)} rows={2} className="mt-1 block w-full border border-gray-300 rounded-md p-2"></textarea></div>
          <div><label>رابط الصورة</label><input type="text" value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} className="mt-1 block w-full border border-gray-300 rounded-md p-2" /></div>
          <div><button type="submit" disabled={isSubmitting} className="w-full flex justify-center py-2 px-4 border rounded-md text-white bg-green-600 hover:bg-green-700 disabled:bg-gray-400">{isSubmitting ? 'جاري الإضافة...' : 'إضافة المنتج'}</button></div>
        </form>
      </div>

      {/* Product List */}
      <div className="bg-white p-8 rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold mb-6">قائمة المنتجات الحالية</h2>
        {isLoading ? <p>جاري تحميل المنتجات...</p> : (
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gray-50"><tr><th className="p-2 text-right">الاسم</th><th className="p-2 text-right">التصنيف</th><th className="p-2">إجراء</th></tr></thead>
              <tbody>
                {products.map(product => (
                  <tr key={product.id} className="border-b">
                    <td className="p-2">{product.name}</td>
                    <td className="p-2">{product.category}</td>
                    <td className="p-2 text-center">
                      <button onClick={() => handleDelete(product.id)} className="text-red-600 hover:text-red-800">حذف</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
};